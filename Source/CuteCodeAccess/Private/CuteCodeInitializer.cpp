#include "CuteCodeInitializer.h"
#include "CuteCodeConstants.h"
#include "CuteCodeEditorSettings.h"
#include "Misc/FileHelper.h"
#include "Misc/Paths.h"
#include "Runtime/XmlParser/Public/FastXml.h"
#include "Windows/WindowsPlatformMisc.h"
#include "IPluginManager.h"

DEFINE_LOG_CATEGORY_STATIC(LogCuteCodeInitializer, Log, All);

#define LOCTEXT_NAMESPACE "FCuteCodeInitializer"

FCuteCodeInitializer::FCuteCodeInitializer(const FString& SolutionPath, const FString& ProjectName)
    : SolutionPath{SolutionPath}
    , ProjectName{ProjectName}
    , VCProjXmlCallback{new FCuteCodeVCProjXmlCallback}
{
    FText OutErrorMessage;
    int32 OutErrorLineNumber = -1;

    FString VcxProjFile = FPaths::Combine(
        SolutionPath,
        INTERMEDIATE_PROJECTFILES,
        ProjectName + TEXT(".vcxproj")
    );

    FFastXml::ParseXmlFile(
        VCProjXmlCallback,
        *VcxProjFile,
        TEXT(""),
        nullptr,
        false,
        false,
        OutErrorMessage,
        OutErrorLineNumber
    );

    if (!OutErrorMessage.IsEmpty())
    {
        UE_LOG(LogCuteCodeInitializer, Error, TEXT("Error parsing .vcxproj file at line: %d %s"),
            OutErrorLineNumber, *OutErrorMessage.ToString());
    }
}

FCuteCodeInitializer::~FCuteCodeInitializer()
{
    delete VCProjXmlCallback;
}

void FCuteCodeInitializer::Run() const
{
    CreateProFile();
    CreateHeadersPriFile();
    CreateSourcesPriFile();
    CreateIncludesPriFile();
    CreateDefinesPriFile();
    CreateProUserFile();
}

void FCuteCodeInitializer::CreateProFile() const
{
    TArray<FString> ProFileLines{{
        "######################################################################",
        "########## This file has been generated by CuteCodeAccess ############",
        "########## DO NOT EDIT IF YOU DON'T KNOW WHAT YOU'RE DOING ###########",
        "######################################################################",
        "TEMPLATE = app",
        "",
        "CONFIG += c++14",
        "CONFIG -= app_bundle qt",
        "",
        "include(defines.pri)",
        "include(includes.pri)",
        "include(headers.pri)",
        "include(sources.pri)",
    }};

    FString ProFilePath = FPaths::Combine(
        SolutionPath,
        INTERMEDIATE_PROJECTFILES,
        ProjectName + ".pro"
    );

    FFileHelper::SaveStringArrayToFile(ProFileLines, *ProFilePath);
}

void FCuteCodeInitializer::CreateHeadersPriFile() const
{
    TArray<FString> HeadersPriLines{{
        "######################################################################",
        "########## This file has been generated by CuteCodeAccess ############",
        "########## DO NOT EDIT IF YOU DON'T KNOW WHAT YOU'RE DOING ###########",
        "######################################################################",
        "HEADERS += \\",
    }};

    AppendFormattedStrings(HeadersPriLines, "\"{0}\" \\", VCProjXmlCallback->GetHeaders());

    FString HeadersPriFilePath = FPaths::Combine(
        SolutionPath,
        INTERMEDIATE_PROJECTFILES,
        FString{"headers.pri"}
    );

    FFileHelper::SaveStringArrayToFile(HeadersPriLines, *HeadersPriFilePath);
}

void FCuteCodeInitializer::CreateSourcesPriFile() const
{
    TArray<FString> SourcesPriLines{{
        "######################################################################",
        "########## This file has been generated by CuteCodeAccess ############",
        "########## DO NOT EDIT IF YOU DON'T KNOW WHAT YOU'RE DOING ###########",
        "######################################################################",
        "SOURCES += \\",
    }};

    AppendFormattedStrings(SourcesPriLines, "\"{0}\" \\", VCProjXmlCallback->GetSources());

    FString SourcesPriFilePath = FPaths::Combine(
        SolutionPath,
        INTERMEDIATE_PROJECTFILES,
        FString{"sources.pri"}
    );

    FFileHelper::SaveStringArrayToFile(SourcesPriLines, *SourcesPriFilePath);
}

void FCuteCodeInitializer::CreateDefinesPriFile() const
{
    TArray<FString> DefinesPriLines{{
        "######################################################################",
        "########## This file has been generated by CuteCodeAccess ############",
        "########## DO NOT EDIT IF YOU DON'T KNOW WHAT YOU'RE DOING ###########",
        "######################################################################",
    }};

    TArray<FString> Defines;
    VCProjXmlCallback->GetDefines().ParseIntoArray(Defines, TEXT(";"), true);

    DefinesPriLines.Add("DEFINES += \\");

    // This is an ugly hack to stop the UCLASS macro from generating code
    // that is only generated when UE_BUILD_DOCS and __INTELLISENSE__ are not
    // defined.
    // That generated code prevents Qt Creator from correctly parsing a class
    // making harder to navigate code and shows several errors, this solution
    // solves that without returning errors during compilation
    DefinesPriLines.Add("\"__INTELLISENSE__=1\" \\");
    AppendFormattedStrings(DefinesPriLines, "\"{0}\" \\", Defines);

    FString DefinesPriFilePath = FPaths::Combine(
        SolutionPath,
        INTERMEDIATE_PROJECTFILES,
        FString{"defines.pri"}
    );

    FFileHelper::SaveStringArrayToFile(DefinesPriLines, *DefinesPriFilePath);
}

void FCuteCodeInitializer::CreateIncludesPriFile() const
{
    TArray<FString> IncludesPriLines{{
        "######################################################################",
        "########## This file has been generated by CuteCodeAccess ############",
        "########## DO NOT EDIT IF YOU DON'T KNOW WHAT YOU'RE DOING ###########",
        "######################################################################",
    }};

    TArray<FString> Includes;
    VCProjXmlCallback->GetIncludes().ParseIntoArray(Includes, TEXT(";"), true);

    IncludesPriLines.Add("INCLUDEPATH += \\");
    AppendFormattedStrings(IncludesPriLines, "\"{0}\" \\", Includes);

    FString IncludePriFilePaths = FPaths::Combine(
        SolutionPath,
        INTERMEDIATE_PROJECTFILES,
        FString{"includes.pri"}
    );

    FFileHelper::SaveStringArrayToFile(IncludesPriLines, *IncludePriFilePaths);
}

void FCuteCodeInitializer::CreateProUserFile() const
{
    const UCuteCodeEditorSettings* Settings = GetDefault<UCuteCodeEditorSettings>();

    if (Settings)
    {
        if (Settings->UnrealKitName.IsEmpty())
        {
            UE_LOG(LogCuteCodeInitializer, Error,
                TEXT("Unreal kit name must be set to create project files correctly"));
            return;
        }

        // Gets current user Roaming folder to find Qt Creator configurations
        int32 EnvVarLen = 512;
        TCHAR* EnvVar = new TCHAR[EnvVarLen];
        FWindowsPlatformMisc::GetEnvironmentVariable(TEXT("APPDATA"), EnvVar, EnvVarLen);

        FString QtCreatorProfileXmlFile = FPaths::Combine(
            FString{ EnvVar },
            FString{ "QtProject/qtcreator/profiles.xml" }
        );

        FPaths::NormalizeDirectoryName(QtCreatorProfileXmlFile);

        if (FPaths::FileExists(QtCreatorProfileXmlFile))
        {
            // TODO: Here parse xml and find configuration uuid
            FCuteCodeProfilesXmlCallback ProfileXmlCallback{};

            FText OutErrorMessage;
            int32 OutErrorLineNumber = -1;

            // Reads profile.xml
            TArray<FString> QtCreatorProfileXmlLines;
            FFileHelper::LoadFileToStringArray(
                QtCreatorProfileXmlLines,
                *QtCreatorProfileXmlFile
            );

            // Removes first 3 lines from profile.xml, because FastXml doesn't
            // parse them correctly and messes up the rest of the file
            QtCreatorProfileXmlLines.RemoveAt(0, 3);

            FString JoinedLines = FString::Join(QtCreatorProfileXmlLines, TEXT("\n"));

            FFastXml::ParseXmlFile(
                &ProfileXmlCallback,
                TEXT(""),
                &JoinedLines[0],
                nullptr,
                false,
                false,
                OutErrorMessage,
                OutErrorLineNumber
            );

            // Parsing is interrupted as soon as the Kit UUID is found, for some reason
            // that counts as an error so checks for that too
            if (!OutErrorMessage.IsEmpty()
                && OutErrorMessage.ToString() != "User aborted the parsing process")
            {
                UE_LOG(LogCuteCodeInitializer, Error, TEXT("Error parsing profiles.xml file at line: %d %s"),
                    OutErrorLineNumber, *OutErrorMessage.ToString());
                return;
            }

            const UCuteCodeEditorSettings* Settings = GetDefault<UCuteCodeEditorSettings>();

            // If parsing has reached end of file it means we have not found a valid kit
            if (OutErrorLineNumber == QtCreatorProfileXmlLines.Num())
            {
                UE_LOG(LogCuteCodeInitializer, Error, TEXT("Kit %s has not been found in Qt Creator settings"), *Settings->UnrealKitName);
                return;
            }

            // Gets the templated pro.user file to configure build environment
            FString ContentDir = IPluginManager::Get().FindPlugin(TEXT("CuteCodeAccess"))->GetContentDir();
            FString ProjectProUserContent;
            FFileHelper::LoadFileToString(ProjectProUserContent, *(ContentDir / "project.pro.user"));

            // Formats the pro.user file with correct values
            ProjectProUserContent = FString::Format(
                *ProjectProUserContent,
                TMap<FString, FStringFormatArg>{
                    {"SOLUTION_PATH", FPaths::ConvertRelativePathToFull(SolutionPath)},
                    {"PROJECT_NAME", ProjectName},
                    {"UNREAL_ENGINE_DIRECTORY", FPaths::ConvertRelativePathToFull(FPaths::EngineDir())},
                    {"UNREAL_KIT_NAME", Settings->UnrealKitName},
                    {"UNREAL_KIT_UUID", ProfileXmlCallback.GetKitUuid()}
                }
            );

            // Saves generated pro.user file
            FString ProjectProUserPath = FPaths::Combine(
                SolutionPath,
                INTERMEDIATE_PROJECTFILES,
                ProjectName + FString{ ".pro.user" }
            );

            FFileHelper::SaveStringToFile(ProjectProUserContent, *ProjectProUserPath);
        }
        else
        {
            UE_LOG(LogCuteCodeInitializer, Error, TEXT("\"%s\" not found"), *QtCreatorProfileXmlFile);
        }
    }
}

void FCuteCodeInitializer::AppendFormattedStrings(TArray<FString>& OutArray, const FString& Formatter, const TArray<FString>& ToAppend) const
{
    for (int32 i = 0; i < ToAppend.Num(); i++)
    {
        OutArray.Add(FString::Format(*Formatter, { ToAppend[i] }));
    }
}

#undef LOCTEXT_NAMESPACE
