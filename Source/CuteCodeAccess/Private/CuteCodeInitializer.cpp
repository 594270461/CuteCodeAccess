#include "CuteCodeInitializer.h"
#include "CuteCodeConstants.h"
#include "Misc/FileHelper.h"
#include "Misc/Paths.h"
#include "Runtime/XmlParser/Public/FastXml.h"

DEFINE_LOG_CATEGORY_STATIC(LogCuteCodeInitializer, Log, All);

#define LOCTEXT_NAMESPACE "FCuteCodeInitializer"

FCuteCodeInitializer::FCuteCodeInitializer(const FString& SolutionPath, const FString& ProjectName)
	: SolutionPath{SolutionPath}
	, ProjectName{ProjectName}
	, FastXmlCallback{new FCuteCodeVCProjXmlCallback}
{
	FText OutErrorMessage;
	int32 OutErrorLineNumber = -1;

	FString VcxProjFile = FPaths::Combine(
		SolutionPath, 
		INTERMEDIATE_PROJECTFILES,
		ProjectName + TEXT(".vcxproj")
	);

	FFastXml::ParseXmlFile(
		FastXmlCallback,
		*VcxProjFile,
		TEXT(""),
		nullptr,
		false,
		false,
		OutErrorMessage,
		OutErrorLineNumber
	);

	if (!OutErrorMessage.IsEmpty())
	{
		UE_LOG(LogCuteCodeInitializer, Error, TEXT("Error parsing .vcxproj file at line: %d %s"),
			OutErrorLineNumber, *OutErrorMessage.ToString());
	}
}

FCuteCodeInitializer::~FCuteCodeInitializer()
{
	delete FastXmlCallback;
}

void FCuteCodeInitializer::Run() const
{
	CreateProFile();
	CreatePriFiles();
}

void FCuteCodeInitializer::CreateProFile() const
{
	TArray<FString> ProFileLines{{
		"TEMPLATE = app",
		"",
		"CONFIG += console c++11",
		"CONFIG -= app_bundle qt",
		"",
		"include(defines.pri)",
		"include(includes.pri)",
		""
	}};

	ProFileLines.Add("HEADERS += \\");
	AppendFormattedStrings(ProFileLines, "{0} \\", FastXmlCallback->GetHeaders());
	ProFileLines.Pop();
	ProFileLines.Add(FString::Format(TEXT("{0}"), { FastXmlCallback->GetHeaders().Last() }));

	ProFileLines.Add("");

	ProFileLines.Add("SOURCES += \\");
	AppendFormattedStrings(ProFileLines, "{0} \\", FastXmlCallback->GetSources());
	ProFileLines.Pop();
	ProFileLines.Add(FString::Format(TEXT("{0}"), { FastXmlCallback->GetSources().Last() }));

	FString ProFilePath = FPaths::Combine(
		SolutionPath,
		INTERMEDIATE_PROJECTFILES,
		ProjectName + ".pro"
	);

	FFileHelper::SaveStringArrayToFile(ProFileLines, *ProFilePath);
}

void FCuteCodeInitializer::CreatePriFiles() const
{
	// Creates defines.pri
	TArray<FString> DefinesPriLines{{
		"######################################################################",
		"########## This file has been generated by CuteCodeAccess ############",
		"######################################################################"
	}};

	TArray<FString> Defines;
	FastXmlCallback->GetDefines().ParseIntoArray(Defines, TEXT(";"), true);

	DefinesPriLines.Add("DEFINES += \\");
	AppendFormattedStrings(DefinesPriLines, "\"{0}\" \\", Defines);
	DefinesPriLines.Pop();
	DefinesPriLines.Add(FString::Format(TEXT("\"{0}\""), { Defines.Last() }));

	FString DefinesPriFilePath = FPaths::Combine(
		SolutionPath,
		INTERMEDIATE_PROJECTFILES,
		FString{"defines.pri"}
	);

	FFileHelper::SaveStringArrayToFile(DefinesPriLines, *DefinesPriFilePath);

	// Creates includes.pri
	TArray<FString> IncludesPriLines{{
		"######################################################################",
		"########## This file has been generated by CuteCodeAccess ############",
		"######################################################################"
	}};

	TArray<FString> Includes;
	FastXmlCallback->GetIncludes().ParseIntoArray(Includes, TEXT(";"), true);

	IncludesPriLines.Add("INCLUDEPATH += \\");
	AppendFormattedStrings(IncludesPriLines, "\"{0}\" \\", Includes);
	IncludesPriLines.Pop();
	IncludesPriLines.Add(FString::Format(TEXT("\"{0}\""), { Includes.Last() }));

	FString IncludePriFilePaths = FPaths::Combine(
		SolutionPath,
		INTERMEDIATE_PROJECTFILES,
		FString{"includes.pri"}
	);

	FFileHelper::SaveStringArrayToFile(IncludesPriLines, *IncludePriFilePaths);
}

void FCuteCodeInitializer::AppendFormattedStrings(TArray<FString>& OutArray, const FString& Formatter, const TArray<FString>& ToAppend) const
{
	for (int32 i = 0; i < ToAppend.Num(); i++)
	{
		OutArray.Add(FString::Format(*Formatter, { ToAppend[i] }));
	}
}

#undef LOCTEXT_NAMESPACE
